var video = null;
var zoom = 1, rotate = 0;
var localstream;
var properties = ['transform', 'WebkitTransform', 'MozTransform',
    'msTransform', 'OTransform'];
var prop = properties[0]
function takeSelfiePicture(e,linkdivid,errordivid,hiddencontrolid,filename) {
    var selfie_html = '<div class="selfiecontainer"><div class="selfieapp">';
    selfie_html += '<video id="camera-stream"></video>';
    selfie_html += '<img id="snap">';
    selfie_html += '<p id="selfie-error-message"></p>';
    selfie_html += '<canvas></canvas>';
    selfie_html += '</div>';
    selfie_html += '</div>';
    selfie_html += '<div class="selfiecontrols">';
    selfie_html += '<a href="#" id="delete-photo" title="Refresh for new"  onclick="delete_photo_btn_click(event);" style="display:none;"><i class="fa fa-undo"></i></a>';
    selfie_html += '<a href="#" id="take-photo" onclick="take_photo_btn_click(event);" title="Take Photo"><i class="fa fa-camera"></i></a>';
    selfie_html += '<a href="#" id="confirm-selfie" onclick="upload_selfie_image(event,\''+errordivid+'\',\''+linkdivid+'\',\''+hiddencontrolid+'\',\''+filename+'\');" title="Confirm"  style="display:none;"><i class="fa fa-check"></i></a>';
    selfie_html += '</div>';
    $('#ModalWindowHeader').html('<p><strong>Take Photo</strong></p>');
    $('#ModalWindowBody').html(selfie_html);
    $('#ModalWindowFooter').html('<div class="content"><a class="btn btn-microbtn submitdiv" onclick="closemodalwindow(20)">Cancel</a></div>');
    $('.modal-header').css("display", "");
    $('.modal-footer').css("display", "");
    openpopupwindow(20);

// References to all the element we will need.
    video = document.querySelector('#camera-stream');
    video.style.left = 0;
    video.style.top = 0;


// The getUserMedia interface is used for handling camera input.
// Some browsers need a prefix so here we're covering all the options
    navigator.getMedia = (navigator.getUserMedia ||
            navigator.webkitGetUserMedia ||
            navigator.mozGetUserMedia ||
            navigator.msGetUserMedia);


    if (!navigator.getMedia) {
        $('#ModalWindowBody').html("");
        displayErrorMessage("Your browser doesn't have support for the audio/vedio access");
    } else {

        // Request the camera.
        navigator.getMedia(
                {
                    video: true
                },
                // Success Callback
                        function (stream) {
                            localstream = stream;
                            // Create an object URL for the video stream and
                            // set it as src of our HTLM video element.
                            //video.src = (window.URL ? URL : webkitURL).createObjectURL(stream);
                            try {
                                video.srcObject=stream;                                
                            } catch (err) {
                                video.src = window.URL.createObjectURL(stream);
                            }
                            // Play the video element to start the stream.
                            video.play();
                            video.onplay = function () {
                                showVideo();
                            };

                        },
                        // Error Callback
                                function (err) {
                                    displayErrorMessage("There was an error with accessing the camera stream: " + err.name, err);
                                }
                        );

                    }
// Mobile browsers cannot play video without user input,
// so here we're using a button to start it manually.
            e.preventDefault();

            // Start video playback manually.
            video.play();
            showVideo();
            var i, j, t;
            /* Find out which CSS transform the browser supports */
            for (i = 0, j = properties.length; i < j; i++) {
                if (typeof video.style[properties[i]] !== 'undefined') {
                    prop = properties[i];
                    break;
                }
            }

        }
function take_photo_btn_click(e) {
    e.preventDefault();
    var snap = takeSnapshot();

    document.querySelector('#snap').setAttribute('src', snap);
    document.querySelector('#snap').classList.add("visible");

    // Enable delete and save buttons
    $('#take-photo').css("display", "none");
    $('#delete-photo').css("display", "");
    $('#confirm-selfie').css("display", "");
    $('#video-zoomout').css("display", "none");
    $('#video-zoomin').css("display", "none");
    $('#video-reset').css("display", "none");

    // Pause video playback of stream.
    video.pause();
}
function delete_photo_btn_click(e) {
    e.preventDefault();

    // Hide image.
    document.querySelector('#snap').setAttribute('src', "");
    document.querySelector('#snap').classList.remove("visible");

    // Disable delete and save buttons
    $('#take-photo').css("display", "");
    $('#delete-photo').css("display", "none");
    $('#confirm-selfie').css("display", "none");
    $('#video-zoomout').css("display", "");
    $('#video-zoomin').css("display", "");
    $('#video-reset').css("display", "");
    // Resume playback of stream.
    video.play();
}
function showVideo() {
    // Display the video stream and the controls.

    hideUI();
    video.classList.add("visible");
    $('.selfiecontrols').addClass("visible");
}
function takeSnapshot() {
    // Here we're using a trick that involves a hidden canvas element.  

    var hidden_canvas = document.querySelector('canvas'),
            context = hidden_canvas.getContext('2d');

    var width = video.videoWidth,
            height = video.videoHeight;

    if (width && height) {

        // Setup a canvas with the same dimensions as the video.
        hidden_canvas.width = width;
        hidden_canvas.height = height;
        /*var sx = (width * zoom) - width;
         var sy = (height * zoom) - height;*/
        // Make a copy of the current frame in the video on the canvas.
        context.drawImage(video, 0, 0, width, height);

        // Turn the canvas image into a dataURL that can be used as a src for our photo.
        return hidden_canvas.toDataURL('image/png');
    }
}
function displayErrorMessage(error_msg, error) {
    error = error || "";
    if (error) {
        console.log(error);
    }
    document.querySelector('#selfie-error-message').innerText = error_msg;
    hideUI();
    document.querySelector('#selfie-error-message').classList.add("visible");
}
function hideUI() {
    // Helper function for clearing the app UI.            
    video.classList.remove("visible");
    $('#snap').removeClass("visible");
    $('.selfiecontrols').removeClass("visible");
}
function upload_selfie_image(e,errordivid,linkdivid,hiddencontrolid,filename) {
    var hidden_canvas = document.querySelector('canvas');
    var photo = hidden_canvas.toDataURL('image/png');
    videoOff();
    stopprocesspopupwindow();
    $.ajax({
        method: 'POST',
        url: 'minclude/imageuploader.php',
        data: {
            photo: photo,
            uploadedfilename:filename
        },
        success: function (data) {
            selfie_success(data,errordivid,linkdivid,hiddencontrolid);
        },
        error: function (data) {
            selfie_error(data,linkdivid,hiddencontrolid);
        },
    });
}
function selfie_success(data,errordivid,linkdivid,hiddencontrolid) {
    var result = jQuery.parseJSON(data);
    $('#'+errordivid).html("Attached Successfully").css("color", "green");
    setTimeout(function () {
        $("#"+errordivid).html("");
    }, 400);
    $('#'+hiddencontrolid).val("../muploadfiles/" + result.newfilename);    
    var div = $("<div>");
    filenamehtml = result.filename;
    if (result.filename.length > 20) {
        filenamehtml = result.filename.substring(0, 20);
        var extension = result.filename.substr((result.filename.lastIndexOf('.') + 1));
        filenamehtml = filenamehtml + "....." + extension;
    }
    $("<a/>").css({"cursor": "pointer", "color": "#0000CC"}).html(filenamehtml).
            attr({"href": "mserver/downloadfiles.php?filelocation=muploadfiles/" + result.newfilename, "Title": "Download", "target": "_blank"})
            .appendTo(div);
    $("#"+linkdivid).html(div);
    $("#"+linkdivid).focus();
    previewUploadedImage('__nothing__',hiddencontrolid, result.newfilename)
}
function selfie_error(linkdivid,hiddencontrolid) {
    popupwarnings("<li>" + e + "</li>");
    $('#'+hiddencontrolid).val("");
    $("#"+linkdivid).html("");
    stopprocesspopupwindow();
    $('#selfie-'+hiddencontrolid).focus();
}
function zoom_out_click(e, position) {
    switch (position) {
        /* Increase zoom and set the transformation */
        case 'out':
            zoom = zoom + 0.1;
            video.style[prop] = 'scale(' + zoom + ') rotate(' + rotate + 'deg)';
            break;

            /* Decrease zoom and set the transformation */
        case 'in':
            zoom = zoom - 0.1;
            video.style[prop] = 'scale(' + zoom + ') rotate(' + rotate + 'deg)';
            break;
            /* Move video around by reading its left/top and altering it */

            /* Reset all to default */
        case 'reset':
            zoom = 1;
            rotate = 0;
            video.style.top = 0 + 'px';
            video.style.left = 0 + 'px';
            video.style[prop] = 'rotate(' + rotate + 'deg) scale(' + zoom + ')';
            break;
    }

    e.preventDefault();
}

function videoOff() {
    //clearInterval(theDrawLoop);
    //ExtensionData.vidStatus = 'off';
    localstream.getVideoTracks()[0].stop();
    video.pause();
    video.src = "";
}